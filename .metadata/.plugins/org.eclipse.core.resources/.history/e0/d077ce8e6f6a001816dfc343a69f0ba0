package GLTesting.SQSTool;

import static io.restassured.RestAssured.given;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import java.util.TimeZone;

import org.testng.annotations.Test;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClientBuilder;
import com.amazonaws.services.sqs.model.SendMessageRequest;

import io.restassured.RestAssured;

public class WriteToSQS extends SignedRequestsHelper {

	public WriteToSQS() throws Exception {
		super();
	}

	private String authCode;
	private static String endpoint;
	private static Properties prop;
	private static String path = "D:\\Automation\\SQS-AutomationForGL\\SQSTool\\SQS.properties";
	private static String baseURI;
	private static String pathParam;
	private static String body;
	private static byte[] signature;
	private static AmazonS3 s3Client;

	@Test
	public void TestAPI() throws Exception {

		SignedRequestsHelper helper = new SignedRequestsHelper();
		getBaseURI();
		getPathParam();
		getBody();
		s3Client = App.credentialProvider();
		System.out.println("Starting test...");
		RestAssured.baseURI = baseURI;

		String sig = helper.sign();

		String encodeMethod = "AWS4-HMAC-SHA256";
		String credential = "AKIAIIZGIT362OVDPJPQ/" + helper.timestamp() + "/us-east-1/sqs/aws4_request";
		String contentType = "";
		String contentLength = "";
		String signedHeader = "SignedHeaders=content-type;host;x-amz-date,"; // "SignedHeaders=cache-control;content-length;content-type=application/json;host;x-amz-date,";
		SignatureGenerator credentialScope = new SignatureGenerator();
		String authorization = encodeMethod + " Credential=" + credential + "," + signedHeader + "Signature=" + sig;

		System.out.println("Authorization: " + authorization);
		given().auth().basic("AWSAccessKeyId", "AKIAIIZGIT362OVDPJPQ").
				header("x-amz-date", timestamp1()).header("host", "sqs.us-east-1.amazonaws.com")
				.header("authorization", authorization).body(body).when().post(pathParam).prettyPeek().then()
				.statusCode(200);

		System.out.println("End of test...");
	}

	protected static String timestamp1() {
		String timestamp = null;
		Calendar cal = Calendar.getInstance();
		DateFormat dfm = new SimpleDateFormat("yyyyMMdd'T'HHmmss'Z'");
		dfm.setTimeZone(TimeZone.getTimeZone("GMT"));
		timestamp = dfm.format(cal.getTime());
		return timestamp;
	}

	public static void readFile() throws IOException {
		File file = new File(path);
		FileInputStream fi = new FileInputStream(file);
		prop = new Properties();
		prop.load(fi);
	}

	public void getAuthCode() throws IOException {
		readFile();
		authCode = prop.getProperty("authCode");
		System.out.println(authCode);
	}

	public static void getEndpoint() throws IOException {
		readFile();
		endpoint = prop.getProperty("endpoint");
		System.out.println(endpoint);
	}

	public static void getBaseURI() throws IOException {
		readFile();
		baseURI = prop.getProperty("baseURI");
		System.out.println(baseURI);
	}

	public static void getPathParam() throws IOException {
		readFile();
		pathParam = prop.getProperty("pathParam");
		System.out.println(pathParam);
	}

	public static String getBody() throws IOException {
		readFile();
		body = prop.getProperty("body");
		System.out.println(body);
		return body;
	}

	public static void sendMessage1() throws IOException {
		getBody();
		String QUEUE_NAME = "https://sqs.us-east-1.amazonaws.com/082894742960/danielzaccagniniGeneralLedgerQueue"
				+ new Date().getTime();
		final AmazonSQS sqs = AmazonSQSClientBuilder.defaultClient();
		String queueUrl = sqs.getQueueUrl(QUEUE_NAME).getQueueUrl();

		SendMessageRequest send_msg_request = new SendMessageRequest().withQueueUrl(queueUrl)
				.withMessageBody("hello world").withDelaySeconds(5);
		sqs.sendMessage(send_msg_request);
	}

}
