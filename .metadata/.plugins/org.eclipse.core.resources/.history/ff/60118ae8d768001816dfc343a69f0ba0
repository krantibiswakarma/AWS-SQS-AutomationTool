package GLTesting.SQSTool;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.equalTo;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

import com.amazonaws.services.s3.AmazonS3;

import io.restassured.RestAssured;

public class WriteToSQS extends App {
	
	private String authCode;
	private static String endpoint;
	//private JSONPObject payload;
	private static Properties prop;
	private static String path = "D:\\Automation\\SQS-AutomationForGL\\SQSTool\\SQS.properties";
	private static String baseURI;
	private static String pathParam;
	private static String body;
	private static byte[] signature;
	private static AmazonS3 s3Client;
	

	public static void main(String[] args) throws Exception {
		
		getBaseURI();
		getPathParam();
		getBody();
		System.out.println("Starting test...");
		RestAssured.baseURI = baseURI;
		signature = App.getSignatureKey("pkgS8EOXw56BnJIV165QvKIobsLjXPaeYfkML70K", "20180604", "us-east-1", "sqs");
		
		given().
				auth().
				basic("AWSAccessKeyId", "AKIAIIZGIT362OVDPJPQ").header("X-Amz-Expires", "604800").
				header("X-amz-date", "20180604T221248Z").
				header("Host", "sqs.us-east-1.amazonaws.com").
				header("Authorization", s3Client).
				urlEncodingEnabled(DEFAULT_URL_ENCODING_ENABLED).
				body(body).
		when().
				post(pathParam).
				prettyPeek().
		then().
				statusCode(200);

		System.out.println("End of test...");
	}
	
	
	public static void readFile() throws IOException{
		File file = new File(path);
		FileInputStream fi = new FileInputStream(file);
		prop = new Properties();
		prop.load(fi);
	}
	
	public void getAuthCode() throws IOException {
		readFile();
		authCode = prop.getProperty("authCode");
		System.out.println(authCode);		
	}
	public static void getEndpoint() throws IOException {
		readFile();
		endpoint = prop.getProperty("endpoint");
		System.out.println(endpoint);	
	}
	public static void getBaseURI() throws IOException {
		readFile();
		baseURI = prop.getProperty("baseURI");
		System.out.println(baseURI);
	}
	public static void getPathParam() throws IOException {
		readFile();
		pathParam = prop.getProperty("pathParam");
		System.out.println(pathParam);
	}
	public static void getBody() throws IOException {
		readFile();
		body = prop.getProperty("body");
		System.out.println(body);
	}

}
