package GLTesting.SQSTool;

import java.io.UnsupportedEncodingException;

import java.net.URLDecoder;
import java.net.URLEncoder;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.SortedMap;
import java.util.TimeZone;
import java.util.TreeMap;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;
import org.testng.annotations.Test;

public class SignedRequestsHelper {

	private static final String EN_METHOD = "AWS4-HMAC-SHA256";
	String L = timestamp()+"/us-east-1/sqs/aws4_request";
	private static final String UTF8_CHARSET = "UTF-8";
	private static final String HMAC_SHA256_ALGORITHM = "HmacSHA256";
	private static final String REQUEST_URI = "082894742960/danielzaccagniniGeneralLedgerQueue"; // "/onca/xml";
	private static final String REQUEST_METHOD = "POST";

	private String endpoint = "sqs.us-east-1.amazonaws.com/"; // must be lowercase
	private String awsAccessKeyId = "AKIAIIZGIT362OVDPJPQ";
	private String awsSecretKey = "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";

	private SecretKeySpec secretKeySpec = null;
	private Mac mac = null;

	public SignedRequestsHelper() throws Exception {
		byte[] secretyKeyBytes = awsSecretKey.getBytes(UTF8_CHARSET);
		secretKeySpec = new SecretKeySpec(secretyKeyBytes, HMAC_SHA256_ALGORITHM);
		mac = Mac.getInstance(HMAC_SHA256_ALGORITHM);
		mac.init(secretKeySpec);
	}

	public String sign(Map<String, String> params) {
		//params.put("AWSAccessKeyId", awsAccessKeyId);
		//params.put("Timestamp", timestamp());

		//SortedMap<String, String> sortedParamMap = new TreeMap<String, String>(params);
		//String canonicalQS = canonicalize(sortedParamMap);
		SignatureGenerator canonValue = new SignatureGenerator();
		String value = canonValue.CanonicalRequest;
		System.out.println("Canonical Value is: "+value);
		
		String CanonValueDigest = org.apache.commons.codec.digest.DigestUtils.sha256Hex(value);
		
		
		String toSign = EN_METHOD + "\n" + WriteToSQS.timestamp1() + "\n" + L + "\n" + CanonValueDigest;
		
		String signatureFinal = org.apache.commons.codec.digest.DigestUtils.sha256Hex(HMAC.hmacDigest(SignatureGenerator.sinKey(),toSign, "HmacSHA256"));

//		String hmac = hmac(toSign);
//		String sig = percentEncodeRfc3986(hmac);
//		String url = "http://" + endpoint + REQUEST_URI + "?" + canonicalQS + "&Signature=" + sig;

		//System.out.println("hmac: " + hmac);
		//System.out.println("sig: " + sig);
		//System.out.println("url: " + url);
		System.out.println("Canonical: " + value);
		System.out.println("String To sign: \n" + toSign);

		return signatureFinal;
	}

	private String hmac(String stringToSign) {
		String signature = null;
		byte[] data;
		byte[] rawHmac;
		try {
			data = stringToSign.getBytes(UTF8_CHARSET);
			rawHmac = mac.doFinal(data);
			Base64 encoder = new Base64();
			signature = new String(encoder.encode(rawHmac));
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(UTF8_CHARSET + " is unsupported!", e);
		}
		return signature;
	}

	protected static String timestamp() {
		String timestamp = null;
		Calendar cal = Calendar.getInstance();
		DateFormat dfm = new SimpleDateFormat("yyyyMMdd");
		// DateFormat dfm = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
		dfm.setTimeZone(TimeZone.getTimeZone("GMT"));
		timestamp = dfm.format(cal.getTime());
		return timestamp;
	}

	private String canonicalize(SortedMap<String, String> sortedParamMap) {
		if (sortedParamMap.isEmpty()) {
			return "";
		}

		StringBuffer buffer = new StringBuffer();
		Iterator<Map.Entry<String, String>> iter = sortedParamMap.entrySet().iterator();

		while (iter.hasNext()) {
			Map.Entry<String, String> kvpair = iter.next();
			buffer.append(percentEncodeRfc3986(kvpair.getKey()));
			buffer.append("=");
			buffer.append(percentEncodeRfc3986(kvpair.getValue()));
			if (iter.hasNext()) {
				buffer.append("&");
			}
		}
		String canonical = buffer.toString();
		return canonical;
	}

	static String percentEncodeRfc3986(String s) {
		String out;
		try {
			out = URLEncoder.encode(s, UTF8_CHARSET).replace("+", "%20").replace("*", "%2A").replace("%7E", "~");
		} catch (UnsupportedEncodingException e) {
			out = s;
		}
		return out;
	}

}
